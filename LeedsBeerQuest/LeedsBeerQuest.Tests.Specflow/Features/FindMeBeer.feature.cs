// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LeedsBeerQuest.Tests.Specflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Find Me Beer")]
    public partial class FindMeBeerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "FindMeBeer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Find Me Beer", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fetch Nearest Beer Establishments without providing a location")]
        public void FetchNearestBeerEstablishmentsWithoutProvidingALocation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch Nearest Beer Establishments without providing a location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I do not provide a location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When("I request the nearest beers establishments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Lat",
                            "Lon",
                            "Distance"});
                table1.AddRow(new string[] {
                            "The George",
                            "53.8010902",
                            "-1.5524343",
                            "206"});
                table1.AddRow(new string[] {
                            "Fox & Newt",
                            "53.800045",
                            "-1.5594819",
                            "287"});
                table1.AddRow(new string[] {
                            "Veritas",
                            "53.8009071",
                            "-1.5511496",
                            "291"});
                table1.AddRow(new string[] {
                            "San Lucus",
                            "53.8008728",
                            "-1.5505636",
                            "330"});
                table1.AddRow(new string[] {
                            "Town Hall Tavern",
                            "53.7995262",
                            "-1.5513806",
                            "332"});
                table1.AddRow(new string[] {
                            "Wino",
                            "53.7983017",
                            "-1.5531774",
                            "358"});
                table1.AddRow(new string[] {
                            "The Faversham",
                            "53.8043518",
                            "-1.5573227",
                            "369"});
                table1.AddRow(new string[] {
                            "The Victoria Hotel",
                            "53.800808",
                            "-1.5497911",
                            "381"});
                table1.AddRow(new string[] {
                            "O\'Neill\'s",
                            "53.8007927",
                            "-1.549229",
                            "418"});
                table1.AddRow(new string[] {
                            "The Highland",
                            "53.7999306",
                            "-1.5617769",
                            "431"});
#line 6
 testRunner.Then("the 10 establishments closest to Joseph\'s Well should be returned", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fetch Nearest Beer Establishments by providing a location")]
        public void FetchNearestBeerEstablishmentsByProvidingALocation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch Nearest Beer Establishments by providing a location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.Given("I provide a latitude of 53.794569064158246 and a longitiude of -1.547548815255316" +
                        "5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.When("I request the nearest beers establishments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Lat",
                            "Lon",
                            "Distance"});
                table2.AddRow(new string[] {
                            "The White Rose",
                            "53.794857",
                            "-1.5473708",
                            "34"});
                table2.AddRow(new string[] {
                            "The Scarbrough Hotel",
                            "53.7953644",
                            "-1.5463839",
                            "117"});
                table2.AddRow(new string[] {
                            "Golf\"\" Cafe Bar",
                            "53.7934952",
                            "-1.5478653",
                            "121"});
                table2.AddRow(new string[] {
                            "LIVIN\'italy",
                            "53.7937393",
                            "-1.5489566",
                            "131"});
                table2.AddRow(new string[] {
                            "Wetherspoon\'s, Railway Station",
                            "53.7956467",
                            "-1.5485017",
                            "135"});
                table2.AddRow(new string[] {
                            "Spencer\'s",
                            "53.7952538",
                            "-1.5457584",
                            "140"});
                table2.AddRow(new string[] {
                            "The Hop",
                            "53.7937317",
                            "-1.5491514",
                            "140"});
                table2.AddRow(new string[] {
                            "The Head of Steam",
                            "53.7952881",
                            "-1.5457343",
                            "143"});
                table2.AddRow(new string[] {
                            "Baht\'ap",
                            "53.7951088",
                            "-1.5454998",
                            "147"});
                table2.AddRow(new string[] {
                            "The Prince of Wales",
                            "53.7951393",
                            "-1.54544",
                            "152"});
#line 22
 testRunner.Then("the 10 establishments closest to that location should be returned", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fetch details of an establishment by name")]
        public void FetchDetailsOfAnEstablishmentByName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch details of an establishment by name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
 testRunner.Given("I provide \'The Faversham\' as the name of an establishment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.When("I request the establishment details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Category",
                            "Location",
                            "Address",
                            "Phone",
                            "Twitter",
                            "Thumbnail",
                            "Excerpt",
                            "Url",
                            "Date",
                            "Tags",
                            "Value",
                            "Beer",
                            "Atmosphere",
                            "Amenities"});
                table3.AddRow(new string[] {
                            "The Faversham",
                            "Pub reviews",
                            "53.8043518,-1.5573227",
                            "1-5 Springfield Mount, Leeds LS2 9NG",
                            "0113 243 1481",
                            "thefaversham",
                            "http://leedsbeer.info/wp-content/uploads/2013/09/IMG_20130910_174903.jpg",
                            "Surprising little upmarket craft beer house right on the edge of the University c" +
                                "ampus.",
                            "http://leedsbeer.info/?p=1939",
                            "9/15/2013 10:56:44 AM",
                            "beer garden,coffee,dance floor,food,live music,sofas",
                            "3",
                            "4",
                            "4",
                            "4"});
#line 38
 testRunner.Then("all details about that establishment should be returned", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to fetch details of an establishment that does not exist")]
        public void AttemptToFetchDetailsOfAnEstablishmentThatDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to fetch details of an establishment that does not exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given("I provide \'Non-existing establishment\' as the name of an establishment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When("I request the establishment details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("a NoContent response should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
